{"version":3,"sources":["src/tests/generators.js"],"names":[],"mappings":"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","file":"src/tests/generators.js","sourcesContent":["import {repeat, toArray, toGenerator, map, transform, zip, modifiableStack, modifiableStackAlt} from '../generators';\n\nconsole.log('repeat', repeat);\n\n// let g = require('../generators');\nlet should = require('should'),\n    expect = require('expect.js');\n\ndescribe('toArray', () => {\n\n  it('should work with 1 value', () => {\n    let value = 1,\n        generator = repeat(value, 1),\n        array = toArray(generator);\n\n    array.should.be.eql([1]);\n    array.should.not.be.eql([2]);\n\n    // expect(g.toArray(generator)).to.be([1]);\n  });\n});\n\ndescribe('transform', () => {\n  let value = 1;\n\n  it('should work with 1 value', () => {\n    let generator = repeat(value, 1);\n\n    expect(toArray(transform(generator, value => value + 1))).to.be.eql([2]);\n  });\n});\n\ndescribe('zip', () => {\n  let generators = toGenerator([\n    toGenerator([1, 2, 3]),\n    toGenerator([4, 5, 6])\n  ]);\n\n  let cases = [\n    ['{args}.length generators of {1}.length items each',\n      [[[1, 2, 3], [4, 5, 6]],\n        [[1,4],[2,5],[3,6]]]\n    ]\n  ];\n\n  for (let c of cases) {\n    console.log(c);\n    let name = c[0],\n        parameters = c[1],\n        input = parameters[0],\n        output = parameters[1];\n\n    it('should work with ' + name, () => {\n      expect(toArray(zip(toGenerator([toGenerator(input[0]), toGenerator(input[1])])))).to.eql(output);\n    });\n  }\n\n  it('should work with 2 generators of 3 items each', () => {\n    expect(toArray(zip(generators))).to.be.eql([[1,4], [2, 5], [3, 6]]);\n  });\n});\n\ndescribe('modifiableStackAlt', () => {\n  let stack = [1];\n\n  it('should run 2 times', () => {\n    let count = 0;\n\n    let array = toArray(map(modifiableStackAlt(stack), value => {\n      count++;\n\n      if (count == 1) stack.push(3);\n\n      return value;\n    }));\n\n    expect(count).to.equal(2);\n    expect(array).to.eql([1, 3]);\n  });\n});\n\ndescribe('stuff', () => {\n  describe('should generate ' + 5 + ' tests', () => {\n    let indices = [0, 1, 2, 3, 4];\n    for (let i = 0; i < 5; i++) {\n      it('should be ' + i, () => {\n        expect(indices[i]).to.equal(i);\n      });\n    }\n  });\n});"]}