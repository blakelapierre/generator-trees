{"version":3,"sources":["src/tests/promises.js"],"names":[],"mappings":";;;;;;sBAAmB,WAAW;;;;0BACJ,aAAa;;qCAEF,eAAe;;AAEpD,QAAQ,CAAC,MAAM,EAAE,YAAM;AACrB,IAAE,CAAC,kBAAkB,EAAE,YAAM;AAC3B,gBANI,IAAI,CAON,uBALE,WAAW,CAKD,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EACrC,UAAC,MAAM,EAAE,KAAK;aAAK,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;KAAA,EAC7C,UAAA,KAAK;aAAI,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;KAAA,CAAC,CAAC;;AAExC,QAAI,OAAO,GAAG,CAAC,CAAC;AAChB,aAAS,OAAO,CAAC,KAAK,EAAE;AACtB,aAAO,aAAY,UAAA,OAAO,EAAI;AAC5B,eAAO,EAAE,CAAC;AACV,eAAO,CAAC,KAAK,CAAC,CAAC;OAChB,CAAC,CAAC;KACJ;GACF,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,QAAQ,CAAC,OAAO,EAAE,YAAM;AACtB,IAAE,CAAC,iBAAiB,EAAE,YAAM;AAC1B,QAAI,OAAO,GAAG,CAAC,CAAC;;AAEhB,WAAO,YAzBG,KAAK,CA0Bb,CAAC,EACD,uBAzBe,SAAS,CAyBd,uBAzBR,WAAW,CAyBS,CAAC,CAAC,CAAC,CAAC,EAAE,UAAA,KAAK;aAAI,OAAO,CAAC,KAAK,CAAC;KAAA,CAAC,EACpD,UAAC,MAAM,EAAE,KAAK;aAAK,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;KAAA,EAC7C,UAAA,KAAK;aAAI,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;KAAA,CAAC,CAAC;;AAExC,aAAS,OAAO,CAAC,KAAK,EAAE;AACtB,aAAO,aAAY,UAAA,OAAO,EAAI;AAC5B,eAAO,EAAE,CAAC;AACV,eAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAChC,eAAO,CAAC,KAAK,CAAC,CAAC;OAChB,CAAC,CAAC;KACJ;GACF,CAAC,CAAC;CACJ,CAAC,CAAC","file":"src/tests/promises.js","sourcesContent":["import expect from 'expect.js';\nimport {sync, async} from '../promises';\n\nimport {toGenerator, transform} from '../generators';\n\ndescribe('sync', () => {\n  it('should run twice', () => {\n    sync(\n      toGenerator([promise(1), promise(2)]),\n      (result, count) => console.log(count, result),\n      error => console.log('error', error));\n\n    let counter = 0;\n    function promise(value) {\n      return new Promise(resolve => {\n        counter++;\n        resolve(value);\n      });\n    }\n  });\n});\n\ndescribe('async', () => {\n  it('should run once', () => {\n    let counter = 0;\n\n    return async(\n      2,\n      transform(toGenerator([1]), value => promise(value)),\n      (result, count) => console.log(count, result),\n      error => console.log('error', error));\n\n    function promise(value) {\n      return new Promise(resolve => {\n        counter++;\n        console.log('counter', counter);\n        resolve(value);\n      });\n    }\n  });\n});\n"]}