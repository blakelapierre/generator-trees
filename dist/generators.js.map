{"version":3,"file":"src/generators.js","sources":["src/generators.js","@traceur/generated/TemplateParser/2","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/4"],"names":[],"mappings":"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","sourceRoot":"/home/blake/development/generator-trees","sourcesContent":["import '/home/blake/development/generator-trees/node_modules/grunt-traceur/node_modules/traceur/bin/traceur-runtime.js';\n\nmodule.exports = {\n  preorder,\n  inorder,\n  postorder,\n  breadthFirst,\n  gMap,\n  gEach,\n  toGenerator,\n  toArray,\n  loop,\n  loopUntilEmpty,\n  makeNode,\n  toNode,\n  asNode\n};\n\nfunction* loop(g) {\n  var q = [],\n      next = 0;\n\n  var result;\n  while(true) {\n    var result = g.next();\n    if (!result.done) {\n      q.push(result.value);\n      yield result.value;\n    }\n    else break;\n  }\n\n  while (true) {\n    var result = g.next();\n    if (!result.done) {\n      q.push(result.value);\n      yield result.value;\n    }\n    else {\n      var value = q[next];\n      yield value;\n      next = (next + 1) % q.length;\n    }\n  }\n}\n\n// q: an array of generators\n// A generator that loops through `q` in round-robin fashion,\n// yielding the next value from each generator\n// until all values have been generated\nfunction* loopUntilEmpty(q) {\n  var queue = {q},\n      next = 0;\n\n  queue.remove = obj => {\n    var index = q.indexOf(obj);\n    if (index != -1) {\n      q.splice(index, 1);\n      if (next >= index) {\n        next = next == 0 ? q.length - 1 : next - 1;\n      }\n    }\n    else throw Error('Tried to remove object that is not in q', obj, q);\n  };\n\n  queue.add = (index, obj) => {\n    q.splice(index, 0, obj);\n    if (index < next) {\n      next = next + 1;\n    }\n  };\n\n  yield queue; //yeah, we want to get rid of this\n\n  while (q.length > 0) {\n    next = next % q.length;\n    yield q[next];\n    next = next + 1;\n  }\n}\n\nfunction gMap(g, fn) {\n  var mapped = [];\n  while (true) {\n    var result = g.next();\n    mapped.push(fn(result.value));\n    if (result.done) return mapped;\n  }\n}\n\nfunction gEach(g, fn) {\n  while (true) {\n    var result = g.next();\n    fn(result.value);\n    if (result.done) return;\n  }\n}\n\nfunction* preorder(node) {\n  if (!node) {\n    throw Error('inorder, no node!');\n  }\n\n  var result = node.next(),\n      value = result.value;\n\n  if (result.done) return value;\n\n  yield value;\n\n  while (true) {\n    var childResult = node.next();\n\n    var childGenerator = preorder(childResult.value);\n    while (true) {\n      var childGeneratorResult = childGenerator.next();\n\n      if (childGeneratorResult.done) {\n        if (childResult.done) return childGeneratorResult.value;\n\n        yield childGeneratorResult.value;\n        break;\n      }\n      else yield childGeneratorResult.value;\n    }\n  }\n}\n\nfunction* inorder(node) {\n  if (!node) {\n    console.log('undefined!');\n  }\n\n  var valueResult = node.next(),\n      value = valueResult.value;\n\n  if (valueResult.done) return value;\n\n  var yieldedValue = false;\n  while (true) {\n    var child = node.next();\n\n    var childGenerator = inorder(child.value);\n    while (true) {\n      var childGeneratorResult = childGenerator.next();\n\n      if (childGeneratorResult.done) {\n        if (yieldedValue && childGeneratorResult.done) return childGeneratorResult.value;\n        yield childGeneratorResult.value;\n        break;\n      }\n      else {\n        yield childGeneratorResult.value;\n      }\n    }\n\n    if (!yieldedValue) {\n      if (child.done) return value;\n      else yield value;\n\n      yieldedValue = true;\n    }\n  }\n}\n\nfunction* postorder(node) {\n    if (!node) {\n    console.log('undefined!');\n  }\n\n  var valueResult = node.next(),\n      value = valueResult.value;\n\n  if (valueResult.done) return value;\n\n  while (true) {\n    var child = node.next();\n\n    var childGenerator = postorder(child.value);\n    while (true) {\n      var childGeneratorResult = childGenerator.next();\n\n      yield childGeneratorResult.value;\n\n      if (childGeneratorResult.done) break;\n    }\n\n    if (child.done) return value;\n  }\n}\n\nfunction* breadthFirst(node) {\n  if (!node) {\n    console.log('node was undefined', node);\n  }\n\n  console.log('breadthFirst', node);\n\n  var valueResult = node.next(),\n      value = valueResult.value;\n\n  console.log('valueResult', valueResult);\n\n  if (valueResult.done) return value;\n\n  yield value;\n\n  var generators = [];\n\n  while (true) {\n    var result = node.next(),\n        childGenerator = breadthFirst(result.value);\n\n    var firstResult = childGenerator.next();\n    console.log('firstResult', firstResult);\n\n    if (!firstResult.done) generators.push(childGenerator);\n\n    if (result.done) {\n\n      if (generators.length == 0) return firstResult.value;\n      yield firstResult.value;\n      break;\n    }\n\n    yield firstResult.value;\n  }\n\n  if (generators.length > 0) {\n    for (var i = 0; i < generators.length - 1; i++) {\n      var generator = generators[i];\n      while (true) {\n        var result = generator.next();\n        yield result.value;\n        if (result.done) break;\n      }\n    }\n\n    var generator = generators[i];\n    while (true) {\n      var result = generator.next();\n      if (result.done) return result.value;\n      else yield result.value;\n    }\n  }\n\n  var twoPass = repeat(transform(node, value => breadthFirst(value), 2));\n\n  // while (true) {\n  //   var result = twoPass.next();\n\n  //   while (true)\n  // }\n\n\n // var rest = transform(node, child => breadthFirst(child));\n\n console.log('twoPass', twoPass);\n  while (true) {\n    var passResult = twoPass.next(),\n        child = passResult.value;\n    console.log('result', passResult, child);\n\n    var generator = child();\n    while (true) {\n      var childResult = generator.next();\n      console.log('childResult', childResult);\n\n      if (passResult.done && childResult.done) return childResult.value;\n\n      yield childResult.value;\n\n      if (childResult.done) break;\n    }\n  }\n\n  // how can we do this with only generators?\n  // var children = toArray(transform(node, child => breadthFirst(child)));\n\n  // for (var i = 0; i < children.length; i++) {\n  //   var result = children[i].next();\n  //   if (result.done) {\n  //     children.splice(i, 1);\n  //     i--;\n  //   }\n  //   if (children.length == 0) return result.value;\n  //   else yield result.value;\n  // }\n\n\n  // for (var i = 0; i < children.length - 1; i++) {\n  //   yield* children[i];\n  // }\n\n  // var generator = children[i];\n  // while (true) {\n  //   var result = generator.next();\n  //   if (result.done) return result.value;\n  //   else yield result.value;\n  // }\n}\n\nfunction* transform(generator, fn) {\n  while (true) {\n    var result = generator.next();\n        newValue = fn(result.value);\n\n    if (result.done) return newValue;\n    else yield (fn(result.value));\n  }\n}\n\nfunction* makeNode(value, children) {\n  if (children) {\n    yield value;\n\n    if (children.length) children = toGenerator(children); // really we want to just do this for arrays\n    if (typeof children == 'function') children = children();\n\n    while (true) {\n      var result = children.next();\n      if (result.done) return result.value;\n      else yield result.value;\n    }\n  }\n  else return value;\n}\n\nfunction* toGenerator(array) {\n  var length = array.length;\n\n  if (length == 0) throw Error('What should we do here?');\n  if (length == 1) return array[0];\n\n  var i;\n  for (i = 0; i < length - 1; i++) yield array[i];\n  return array[i];\n}\n\n// There are multiple ways to implement this function...\nfunction* repeat(generator, count) {\n  var values = [];\n\n  yield function* () {\n    while(true) {\n      var result = generator.next();\n      console.log('got result', result);\n      values.push(result.value);\n\n      if (result.done) return result.value;\n      else yield result.value;\n    }\n  };\n\n  for (var i = 0; i < count - 1; i++) {\n    yield function* () {\n      for (var v = 0; v < values.length - 1; v++) yield values[v];\n      return values[v];\n    };\n  }\n}\n\nfunction toArray(generator) {\n  var array = [];\n\n  while (true) {\n    var result = generator.next();\n    array.push(result.value);\n    if (result.done) return array;\n  }\n}\n\nfunction toNode(generator) {\n  var ret = {};\n\n  var result = generator.next();\n  ret.value = result.value;\n  if (!result.done) ret.children = toArray(generator);\n  return ret;\n}\n\nfunction asNode(generator, ...args) {\n  return toNode(generator(...args));\n}\n\n\n// Implementing and Traversing Trees Using Generators in JavaScript [ECMAScript 6]","var __moduleName = $__placeholder__0;","($__placeholder__0 = require($__placeholder__1), \n        $__placeholder__2 && $__placeholder__3.__esModule && $__placeholder__4 || {default: $__placeholder__5})","\n            for (var $__placeholder__0 = [], $__placeholder__1 = $__placeholder__2;\n                 $__placeholder__3 < arguments.length; $__placeholder__4++)\n              $__placeholder__5[$__placeholder__6 - $__placeholder__7] = arguments[$__placeholder__8];","$traceurRuntime.spread($__placeholder__0)"]}