{"version":3,"file":"dist/trees.js","sources":["src/trees.js","@traceur/generated/TemplateParser/3","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","sourceRoot":"dist/","sourcesContent":["var {toArray, toGenerator} = require('./generators');\n\n\nmodule.exports = {\n  preorder,\n  inorder,\n  postorder,\n  breadthFirst,\n  reduce,\n  makeNode,\n  toNode,\n  asNode,\n  allBinaryTrees,\n  printTree\n};\n\n\n\n//   R\n//  / \\\n// A  B\n//\n// : [R, A, B]\nfunction* preorder(node) {\n  if (!node) {\n    //return undefined;\n    throw Error('preorder, no node!');\n  }\nconsole.log('preorder', node);\n  var result = node.next(),\n      value = result.value;\n\n  if (result.done) return value;\n\n  yield value;\n\n  while (true) {\n    var childResult = node.next();\n\n    var childGenerator = preorder(childResult.value);\n    while (true) {\n      var childGeneratorResult = childGenerator.next();\n\n      if (childGeneratorResult.done) {\n        if (childResult.done) return childGeneratorResult.value;\n\n        yield childGeneratorResult.value;\n        break;\n      }\n      else yield childGeneratorResult.value;\n    }\n  }\n}\n\nfunction reduce(node, reduceFn, collapseFn, unitValue) {\n  if (unitValue == undefined) {\n    unitValue = collapseFn;\n    collapseFn = reduceFn;\n  }\n  // console.log('reduce', node);\n\n  // if (!node) {\n  //   console.log('reduce, no node!');\n  // }\n\n  // var valueResult = node.next(),\n  //     value = valueResult.value;\n\n  //     console.log(value);\n\n  // if (valueResult.done) return value;\n\n  // while (true) {\n  //   var child = node.next(),\n  //       reducedValue = unitValue;\n\n  //   var childGenerator = reduce(child.value, reduceFn, unitValue);\n  //   while (true) {\n  //     var childGeneratorResult = childGenerator.next(),\n  //         childValue = childGeneratorResult.value;\n\n  //     // should we be mutating?\n  //     // reduceFn(reducedValue, childValue);\n\n  //     reducedValue = reduceFn(reducedValue, childValue);\n\n  //     if (childGeneratorResult.done) break;\n  //   }\n\n  //   if (child.done) return reducedValue;\n\n  //   yield reducedValue;\n  // }\n\n  return reduceNode(node);\n\n  function reduceNode(node) {\n    console.log('reduceNode', node);\n    if (!node) {\n      console.log('reduceNode, no node!');\n    }\n\n    var valueResult = node.next(),\n        value = valueResult.value;\n\n    if (valueResult.done) return collapseFn(value, unitValue());\n\n    return collapseFn(value, reduceChildren(node));\n  }\n\n  function reduceChildren(children) {\n    console.log('reduceChildren', children);\n    var reducedValue = unitValue();\n    while (true) {\n      var childResult = children.next(),\n          value = childResult.value;\n\n      reducedValue = reduceFn(reducedValue, reduceNode(value));\n\n      if (childResult.done) break;\n    }\n    return reducedValue;\n  }\n}\n\n\n//   R\n//  / \\\n// A  B\n//\n// : [A, R, B]\nfunction* inorder(node) {\n  if (!node) {\n    console.log('inorder, no node!');\n  }\n\n  var valueResult = node.next(),\n      value = valueResult.value;\n\n  if (valueResult.done) return value;\n\n  var yieldedValue = false;\n  while (true) {\n    var child = node.next();\n\n    var childGenerator = inorder(child.value);\n    while (true) {\n      var childGeneratorResult = childGenerator.next();\n\n      if (childGeneratorResult.done) {\n        if (yieldedValue && child.done) return childGeneratorResult.value;\n        yield childGeneratorResult.value;\n        break;\n      }\n      else {\n        yield childGeneratorResult.value;\n      }\n    }\n\n    if (!yieldedValue) {\n      if (child.done) return value;\n      else yield value;\n\n      yieldedValue = true;\n    }\n  }\n}\n\n\n//   R\n//  / \\\n// A  B\n//\n// : [A, B, R]\nfunction* postorder(node) {\n  if (!node) {\n    console.log('postorder, no node!');\n  }\n\n  var valueResult = node.next(),\n      value = valueResult.value;\n\n  if (valueResult.done) return value;\n\n  while (true) {\n    var child = node.next();\n\n    var childGenerator = postorder(child.value);\n    while (true) {\n      var childGeneratorResult = childGenerator.next();\n\n      yield childGeneratorResult.value;\n\n      if (childGeneratorResult.done) break;\n    }\n\n    if (child.done) return value;\n  }\n}\n\n//   R\n//  / \\\n// A  B\n//\n// : [R, A, B]\n//\n// Emit self\n// foreach child:\n//    Emit\nfunction* breadthFirst(node, indent) {\n  indent = indent || '';\n  if (!node) {\n    console.log('breadthFirst, no node', node);\n  }\n\n  var valueResult = node.next(),\n      value = valueResult.value;\n\n  if (valueResult.done) return value;\n\n  yield value;\n\n  var queue = [{generator:node}];\n\n  while (queue.length != 0) {\n    var generator = queue.shift();\n\n    while (true) {\n      var result = generator.generator.next(),\n          childGenerator = result.value;\n\n      var firstResult = childGenerator.next();\n\n      if (firstResult.done) {\n        if (result.done && queue.length == 0) return firstResult.value;\n      }\n      else {\n        queue.push({parent: firstResult.value, generator: childGenerator});\n      }\n\n      yield firstResult.value;\n\n      if (result.done) break;\n    }\n  }\n}\n\nfunction* makeNode(value, children) {\n  if (children) {\n    yield value;\n\n    if (children.length) children = toGenerator(children); // really we want to just do this for arrays\n    if (typeof children == 'function') children = children();\n\n    while (true) {\n      var result = children.next();\n      if (result.done) return result.value;\n      else yield result.value;\n    }\n  }\n  else return value;\n}\n\nfunction makeFnNode(value, children) {\n  return () => makeNode(value, children);\n}\n\nfunction toNode(generator) {\n  var ret = {};\n\n  var result = generator.next();\n  ret.value = result.value;\n  if (!result.done) ret.children = toArray(generator);\n  return ret;\n}\n\nfunction asNode(generator, ...args) {\n  return toNode(generator(...args));\n}\n\nfunction printGenerator(generator) {\n  while (true) {\n    var result = generator.next();\n\n    console.log('print', result.value);\n\n    if (result.done) break;\n  }\n}\n\nfunction* allBinaryTrees(size, valueGenerator) {\n  if (size == 0) return makeNode(undefined);\n\n  // foreach (tree in trees) {\n  //   yield tree;\n  // }\n\n  var i = 0;\n  for (i; i < size - 1; i++) {\n    for (var j = 0; j < size - i - 1; j++) {\n      yield constructTree(i, j, valueGenerator, 0);\n    }\n  }\n\n\n  function* constructTree(leftSize, rightSize, valueGenerator, seed) {\n    var value = valueGenerator(seed).next().value;\n  }\n}\n\n// static IEnumerable<Node> AllBinaryTrees(int size)\n// {\n//     if (size == 0)\n//         return new Node[] { null };\n//     return from i in Enumerable.Range(0, size)\n//            from left in AllBinaryTrees(i)\n//            from right in AllBinaryTrees(size - 1 - i)\n//            select new Node(left, right);\n// }\n\n\nfunction* allBinaryTrees(size, valueGenerator, seed) {\n  if (size == 0) return makeFnNode(undefined);\n\n  var nodeValue = valueGenerator(seed).next().value;\n\n  if (size == 1) return makeFnNode(nodeValue);\n\n  var i = 0;\n  for (i; i < size - 1; i++) {\n    var left = allBinaryTrees(i, valueGenerator, nodeValue + 1);\n\n    while (true) {\n      var j = size - 1 - i,\n          right = allBinaryTrees(j, valueGenerator, nodeValue + 1),\n          leftResult = left.next(),\n          createLeft = leftResult.value;\n\n      while (true) {\n        var rightResult = right.next(),\n            createRight = rightResult.value;\n\n        yield makeFnNode(nodeValue, [createLeft, createRight]);\n\n        if (rightResult.done) break;\n      }\n      if (leftResult.done) break;\n    }\n  }\n\n  var left = allBinaryTrees(i, valueGenerator, nodeValue + 1);\n  while (true) {\n    var leftResult = left.next();\n\n    if (leftResult.done) return makeFnNode(nodeValue, [leftResult.value, makeFnNode(undefined)]);\n    yield makeFnNode(nodeValue, [leftResult.value, makeFnNode(undefined)]);\n  }\n}\n\nfunction* allTrees(size, maxChildren, parent, nodeValueGenerator) {\n  console.log('all', size);\n  if (size == 0) return makeNode(undefined);\n\n  nodeValue = nodeValueGenerator.next().value;\n\n  if (size == 1) return makeNode(nodeValue);\n\n  yield makeNode(nodeValue);\n\n  var i = 0;\n  for (i; i < size - 1; i++) {\n    console.log('i', i);\n    var left = allBinaryTrees(i, nodeValueGenerator);\n    console.log('left', left);\n    while (true) {\n      var leftResult = left.next(),\n          j = size - 1 - i,\n          right = allBinaryTrees(j, nodeValueGenerator);\n\n      console.log('leftResult', leftResult);\n      console.log('right', right);\n\n      while (true) {\n        var rightResult = right.next(),\n            children = [];\n\n        console.log('rightResult', rightResult);\n\n        // if (i != 0) children.push(leftResult.value);\n        // if (j != 0) children.push(rightResult.value);\n        // if (!(leftResult.done && leftResult.value == undefined)) children.push(leftResult.value);\n        // if (!(rightResult.done && rightResult.value == undefined)) children.push(rightResult.value);\n\n        console.log('children', children);\n        console.log('nodeValue', nodeValue);\n\n        var childValue = nodeValueGenerator.next().value;\n        // yield makeNode(nodeValue, children.length > 0 ? children : undefined);\n        yield makeNode(childValue, [leftResult.value, rightResult.value]);\n\n        if (rightResult.done) break;\n      }\n      if (leftResult.done) break;\n    }\n  }\n\n  var left = allBinaryTrees(i, nodeValueGenerator),\n      j = 0;\n  while (true) {\n    var leftResult = left.next();\n\n    console.log('last leftResult', leftResult);\n\n    nodeValue = nodeValueGenerator.next().value;\n    if (leftResult.done) return makeNode(nodeValue, [leftResult.value, makeNode(undefined)]);\n    yield makeNode(nodeValue, [leftResult.value, makeNode(undefined)]);\n    j++;\n  }\n}\n\nfunction printTree(tree, level) {\n  level = level || 0;\n\n  if (tree == undefined) return print('<undefined>');\n\n  var node = tree(),\n      valueResult = node.next(),\n      nodeValue = valueResult.value;\n\n  if (nodeValue == undefined) return;\n  if (valueResult.done) return print(nodeValue);\n\n  printChild(node);\n  print(nodeValue);\n  printChild(node);\n\n  function print(value) {\n    console.log(indent(level) + value);\n  }\n\n  function printChild(tree) {\n    var childResult = tree.next(),\n        childValue = childResult.value;\n\n    if (childValue != undefined) printTree(childValue, level + 1);\n\n    return !childResult.done;\n  }\n\n  function indent(count, character) {\n    character = character || ' ';\n    var s = '';\n    for (var i = 0; i < count; i++) s += character;\n    return s;\n  }\n}\n\n// Implementing and Traversing Trees Using Generators in JavaScript [ECMAScript 6]\n\n\n//   f\n//  b\n//   e\n// r\n//   d\n//  a\n//   c\n","var __moduleName = $__placeholder__0;","\n            for (var $__placeholder__0 = [], $__placeholder__1 = $__placeholder__2;\n                 $__placeholder__3 < arguments.length; $__placeholder__4++)\n              $__placeholder__5[$__placeholder__6 - $__placeholder__7] = arguments[$__placeholder__8];","$traceurRuntime.spread($__placeholder__0)"]}