{"version":3,"sources":["src/promises.js"],"names":[],"mappings":";;;;;;;QAAQ,IAAI,GAAJ,IAAI;QAAE,IAAI,GAAJ,IAAI;QAAE,KAAK,GAAL,KAAK;;AAEzB,SAAS,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE;AAC5C,SAAO,UAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,QAAI,KAAK,GAAG,CAAC,CAAC;AACd,WAAO,CAAC,SAAS,CAAC,CAAC;;AAEnB,aAAS,OAAO,CAAC,SAAS,EAAE;4BACN,SAAS,CAAC,IAAI,EAAE;;UAA/B,KAAK,mBAAL,KAAK;UAAE,IAAI,mBAAJ,IAAI;;AAEhB,WAAK,CACF,IAAI,CACH,UAAA,MAAM,EAAI;AACR,aAAK,EAAE,CAAC;AACR,cAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACtB,YAAI,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,KACpB,OAAO,CAAC,SAAS,CAAC,CAAC;OACzB,EACD,WAAW,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;;AAElC,eAAS,KAAK,CAAC,KAAK,EAAE;AACpB,aAAK,EAAE,CAAC;AACR,mBAAW,CAAC,KAAK,CAAC,CAAC;AACnB,YAAI,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,KACpB,OAAO,CAAC,SAAS,CAAC,CAAC;OACzB;KACF;GACF,CAAC,CAAC;CACJ;;AAED,SAAS,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE;AAC5C,SAAO,UAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,WAAO,CAAC,SAAS,CAAC,CAAC;;AAEnB,aAAS,OAAO,CAAC,SAAS,EAAE;4BACN,SAAS,CAAC,IAAI,EAAE;;UAA/B,KAAK,mBAAL,KAAK;UAAE,IAAI,mBAAJ,IAAI;;AAEhB,WAAK,CACF,IAAI,CACH,IAAI,EACJ,KAAK,CAAC,CAAC;;;AAGX,eAAS,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE;AAC1B,cAAM,CAAC,MAAM,CAAC,CAAC;AACf,YAAI,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,KACrB,OAAO,CAAC,SAAS,CAAC,CAAC;OACzB;;AAED,eAAS,KAAK,CAAC,KAAK,EAAE;AACpB,YAAI,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,KAC3B;AACH,qBAAW,CAAC,KAAK,CAAC,CAAC;AACnB,cAAI,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,KACpB,OAAO,CAAC,SAAS,CAAC,CAAC;SACzB;OACF;KACF;GACF,CAAC,CAAC;CACJ;;AAED,SAAS,KAAK,CAAC,aAAa,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE;AAC5D,SAAO,UAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,QAAI,KAAK,GAAG,CAAC;QACT,OAAO,GAAG,CAAC;QACX,QAAQ,GAAG,KAAK,CAAC;;AAErB,WAAO,CAAC,SAAS,CAAC,CAAC;;AAEnB,aAAS,OAAO,CAAC,SAAS,EAAE;AAC1B,aAAO,EAAE,CAAC;AACV,WAAK,EAAE,CAAC;;4BAEY,SAAS,CAAC,IAAI,EAAE;;UAA/B,KAAK,mBAAL,KAAK;UAAE,IAAI,mBAAJ,IAAI;;AAEhB,cAAQ,GAAG,IAAI,CAAC;;AAEhB,WAAK,CACF,IAAI,CACH,UAAA,MAAM,EAAI;AACR,eAAO,EAAE,CAAC;AACV,cAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACtB,YAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,KAC7B,IAAI,OAAO,IAAI,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;OACvC,EACD,WAAW,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;;AAElC,UAAI,OAAO,GAAG,aAAa,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;KACjD;;AAED,aAAS,KAAK,CAAC,KAAK,EAAE;AACpB,aAAO,EAAE,CAAC;AACV,WAAK,EAAE,CAAC;AACR,iBAAW,CAAC,KAAK,CAAC,CAAC;AACnB,UAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,KAC7B,IAAI,OAAO,IAAI,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;KACvC;GACF,CAAC,CAAC;CACJ","file":"src/promises.js","sourcesContent":["export {sync, pipe, async};\n\nfunction sync(generator, notify, notifyError) {\n  return new Promise((resolve, reject) => {\n    let count = 0;\n    process(generator);\n\n    function process(generator) {\n      let {value, done} = generator.next();\n\n      value\n        .then(\n          result => {\n            count++;\n            notify(result, count);\n            if (done) resolve(count);\n            else process(generator);\n          },\n          notifyError ? error : reject);\n\n      function error(error) {\n        count++;\n        notifyError(error);\n        if (done) resolve(count);\n        else process(generator);\n      }\n    }\n  });\n}\n\nfunction pipe(generator, notify, notifyError) {\n  return new Promise((resolve, reject) => {\n    process(generator);\n\n    function process(generator) {\n      let {value, done} = generator.next();\n\n      value\n        .then(\n          next,\n          error);\n          //notifyError ? error : reject);\n\n      function next(result, done) {\n        notify(result);\n        if (done) resolve(result);\n        else process(generator);\n      }\n\n      function error(error) {\n        if (!notifyError) reject(error);\n        else {\n          notifyError(error);\n          if (done) resolve(count);\n          else process(generator);\n        }\n      }\n    }\n  });\n}\n\nfunction async(maxConcurrent, generator, notify, notifyError) {\n  return new Promise((resolve, reject) => {\n    let count = 0,\n        running = 0,\n        finished = false;\n\n    process(generator);\n\n    function process(generator) {\n      running++;\n      count++;\n\n      let {value, done} = generator.next();\n\n      finished = done;\n\n      value\n        .then(\n          result => {\n            running--;\n            notify(result, count);\n            if (!finished) process(generator);\n            else if (running == 0) resolve(count);\n          },\n          notifyError ? error : reject);\n\n      if (running < maxConcurrent) process(generator);\n    }\n\n    function error(error) {\n      running--;\n      count++;\n      notifyError(error);\n      if (!finished) process(generator);\n      else if (running == 0) resolve(count);\n    }\n  });\n}"]}